class Solution {
  public:
  vector<vector<int>> coordinates = {{-1,-2},{-1,2},{1,-2},{1,2},{-2,-1},{-2,1},{2,-1},{2,1}};

    int helper(int src_x, int src_y, int target_x, int target_y, int n){
        vector<vector<int>> visited(n, vector<int>(n, 0));
        queue<pair<int,int>> q;
        q.push({src_x, src_y});
        visited[src_x][src_y]=1;
        int steps=0;
        while(!q.empty()){
            int qsize=q.size();
            for(int i=0;i<qsize;i++){
                auto it=q.front(); q.pop();
                int x=it.first;
                int y=it.second;
                if(x==target_x && y==target_y){
                    return steps;
                }
                for(int k=0;k<coordinates.size();k++){
                    int new_x=x+coordinates[k][0];
                    int new_y=y+coordinates[k][1];
                    if(new_x>=0 && new_y>=0 && new_x<n && new_y<n && visited[new_x][new_y]==0){
                        visited[new_x][new_y]=1;
                        q.push({new_x,new_y});
                    }
                }
                
                
            }
            steps+=1;
        }
        return -1;
    }
    int minStepToReachTarget(vector<int>& knightPos, vector<int>& targetPos, int n) {
        
        // Code here
        int target_x=targetPos[0]-1;
        int target_y=targetPos[1]-1;
        int src_x=knightPos[0]-1;
        int src_y=knightPos[1]-1;
        return helper(src_x,src_y,target_x,target_y,n);
    }
};
